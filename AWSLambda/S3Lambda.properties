Lambda / S3

1.- Create S3 Bucket:
	.- Defina (nombre/region) #Su funcion lambda tiene que estar en la misma region
	Nota: Si el ACL se define como (Objetos propiedad de cualquier cuenta), se puede modificar el acceso a los objetos
	Si se define como (Objetos unicamente propiedad esta cuenta), no se puede modificar el acceso.
	En (Acciones), "URL Pre firmadas", se le da un acceso seguro a cualquier 3ro que desee descargar el objeto y no tenga accesos ACL
2.- Upload file:
#La funcion lambda en los pasos posteriores devolver치 informaci칩n del archivo
3.- Crear una politica en IAM:
	.- Crear politica, con el siguiente JSON: s3-trigger-tutorial
	{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:CreateLogStream"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::*/*"
        }
    ]
}

4.- Crear rol de ejecuci칩n:
#Conceda permisos a AWS Lambda
	.- Cree un rol > Servicios > seleccionar politica creada anteriormente > Create rol

5.- Crear funcion Lambda:
#Cree una funcion con un Hello Worl basic
	.- Defina nombre > (Ejecution) NodeJS >(Arquitecture)x84_64  
	.- (Cambiar rol de ejecuci칩n) > Rol Existente > Seleccionar rol creado en los pasos anteriores
	.- Create funcion
	
6.- Implementar codigo de funcion:
#La funcion recupera el nombre del objeto, el repositorio, y utiliza
#la API de aws SDK para devolver el tipo de objeto
#consulte la siguiente pagina para hacer la misma Accion con otros lenguajes: https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html#with-s3-example-prereqs
	.- En el apartado de "codigo fuente", pegue el siguiente codigo JavaScrip:
	
	const aws = require('aws-sdk');

const s3 = new aws.S3({ apiVersion: '2006-03-01' });

exports.handler = async (event, context) => {
    // Get the object from the event and show its content type
    const bucket = event.Records[0].s3.bucket.name;
    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
    const params = {
        Bucket: bucket,
        Key: key,
    }; 
    try {
        const { ContentType } = await s3.headObject(params).promise();
        console.log('CONTENT TYPE:', ContentType);
        return ContentType;
    } catch (err) {
        console.log(err);
        const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;
        console.log(message);
        throw new Error(message);
    }
};

7.- Cree el activador del S3:
	.- Seleccione S3 creado anteriormente
	.- Tipo de vento > "Todos los eventos de Creacion"
	.- Check "Invocacion recursivo
	.- JSON:
	
	{
  "Records": [
    {
      "eventVersion": "2.0",
      "eventSource": "aws:s3",
      "awsRegion": "us-east-1",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {
        "principalId": "EXAMPLE"
      },
      "requestParameters": {
        "sourceIPAddress": "127.0.0.1"
      },
      "responseElements": {
        "x-amz-request-id": "EXAMPLE123456789",
        "x-amz-id-2": "EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH"
      },
      "s3": {
        "s3SchemaVersion": "1.0",
        "configurationId": "testConfigRule",
        "bucket": {
          "name": "mybucketlambda-v3",
          "ownerIdentity": {
            "principalId": "EXAMPLE"
          },
          "arn": "arn:aws:s3:::mybucketlambda-v3"
        },
        "object": {
          "key": "Certificate.pdf",
          "size": 1024,
          "eTag": "0123456789abcdef0123456789abcdef",
          "sequencer": "0A1B2C3D4E5F678901"
        }
      }
    }
  ]
}

8.- Ejecutar TEST
