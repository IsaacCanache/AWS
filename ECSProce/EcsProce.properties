Create Cluster ECS / Create Imagen in ECR / Deploy container HTTPD "Hello Word"

Prerequisitos:
1.- Install GitBash
2.- Install CLI AWS
3.- Login Credentials AWS
4.- Install Docker in EC2
----------------------------
////////////////////////////////
Install CLI IN AWS EN UBUNTU:

1.- curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#(si no esta instalado unzip): install sudo apt install unzip
2.- unzip awscliv2.zip
3.- sudo ./aws/install
4.- aws --version
5.- AWS configure (Create User CLI / Download Key)
6.- (Check) aws s3 ls
#Si dice Acceso Denegado a la opcición de LISTBUCKET entonces conceda una polica de permiso al usuario
	.- (IAM/Users/Your_UserCLI/CreatePolice/S3/OPERATIONS LISTBUCK)
	.- Recheck
7.- Si devuelve el resultado, esta oficialmente conectado. 
////////////////////////////////
Procedimiento:

1.- Crear un EC2 (linux ubuntu)
	.-Create KeyPar
2.- Connect SSH 
 ssh -i 'C:\Users\cienc\Downloads\KP_EC2_TEST_DOCK.pem' ubuntu@52.90.75.198
 
3.- Install repository APT GET
(# Add Docker's official GPG key:)
sudo apt-get update -y
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

(#Add the repository to Apt sources:)

echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

(# Instale paquete de Docker: )
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

(#Check Installing:)
sudo docker run hello-world

4.- Crear imagen 

( # Crear archivo Dokerfile:)
touch Dockerfile
( # Editar Archivo y pegar lo siguiente:)

FROM public.ecr.aws/docker/library/ubuntu:18.04

# Install dependencies
RUN apt-get update && \
 apt-get -y install apache2

# Install apache and write hello world message
RUN echo 'Hello World!' > /var/www/html/index.html

# Configure apache
RUN echo '. /etc/apache2/envvars' > /root/run_apache.sh && \
 echo 'mkdir -p /var/run/apache2' >> /root/run_apache.sh && \
 echo 'mkdir -p /var/lock/apache2' >> /root/run_apache.sh && \ 
 echo '/usr/sbin/apache2 -D FOREGROUND' >> /root/run_apache.sh && \ 
 chmod 755 /root/run_apache.sh

EXPOSE 80

CMD /root/run_apache.sh

#Crear la imagen a partir del Dokerfile
sudo docker build -t hello-world .

#Check image create correct
docker images --filter reference=hello-world

#Expose image port 80
docker run -t -i -p 80:80 hello-world

#Check brower
Verificar en el navegador:
- Si esta desde una EC2 > Copie y pegue el DNS Public 4V
- Si esta local > Copie y pegue el localhost en el puerto 80

5.- Autentiquese en ECR desde AWS CLI

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 258829008119.dkr.ecr.us-east-1.amazonaws.com
							(REGION ACCOUNT)												(IDAccount)           (REGION ACCOUNT)
(Nota: Si sale un ACCESS DENEG IAM USER ETC y un tipo de operación denegada hay que hacer lo mismo que en CONFIGURACION CLI paso 6 pero con el servicio/operacion que pide)

6.- Crear repositorio ECR (CLI) 
aws ecr create-repository \
    --repository-name hello-repository \
    --image-scanning-configuration scanOnPush=true \
    --region us-east-1
	
7.- Enviar una imagen al repositorio
#List images for view imagen to expor
docker images

#Etiquetar imagen para enviarla
docker tag hello-world:latest 258829008119.dkr.ecr.us-east-1.amazonaws.com/hello-repository
			(Imagen/etiqueta)                (IDAccount/REGION)              (NAMEREPOECR)
#Enviar imagen
docker push 258829008119.dkr.ecr.us-east-1.amazonaws.com/hello-repository
						(IDAccount/REGION)				(NAMEREPOECR)

(Opcional)

#Extraer imagen
docker pull 258829008119.dkr.ecr.us-east-1.amazonaws.com/hello-repository:latest
						(IDAccount/REGION)				(NAMEREPOECR)
						
8.- Eliminar una Imagen
aws ecr batch-delete-image \
      --repository-name hello-repository \
      --image-ids imageTag=latest \
      --region region
	  
9.- Eliminar un repositorio
aws ecr delete-repository \
      --repository-name hello-repository \
      --force \
      --region region
	  
10.- Crear cluster ECS
------------------------
Crear IAM ROL:
AmazonECSTaskExecutionRolePolicy

Crear Cluster:  ECS
Create Cluster> Fargate > create

Crear Tarea: TaskDefinition
Create task JSON :
------------
{
    "family": "sample-fargate", 
    "networkMode": "awsvpc", 
    "containerDefinitions": [
        {
            "name": "fargate-app", 
            "image": "public.ecr.aws/docker/library/httpd:latest", 
            "portMappings": [
                {
                    "containerPort": 80, 
                    "hostPort": 80, 
                    "protocol": "tcp"
                }
            ], 
            "essential": true, 
            "entryPoint": [
                "sh",
		"-c"
            ], 
            "command": [
                "/bin/sh -c \"echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS.</p> </div></body></html>' >  /usr/local/apache2/htdocs/index.html && httpd-foreground\""
            ]
        }
    ], 
    "requiresCompatibilities": [
        "FARGATE"
    ], 
    "cpu": "256", 
    "memory": "512"
}
-----------

Create service:
Fargate > TaskJson

Check funcinamiento:
Task> Conafiguraciones > IP PUBLIC > Verificar en el navegador

(opcional)
Cree Load Balancer:
1.- Console EC2 > Target Gruop (Load Balancer) "TargetInstancias"
2.- Create Load Balancer por open 80 http / Adjun TargetGroup create
